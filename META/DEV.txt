Current development principles:

1) only store_local_db touches db models
2) stores can only READ from other stores
3) only controller_main touches views
4) business logic goes in the controllers
5) shared controller logic and specialized logic goes in handlers
6) 3rd party tools go in vendors
7) models are basically data-holders maybe plus some simple logic
8) models are `smallest common denomoinator`, in the github api sense. ie
     all models can be built from the minial info in github api
9) Sync classes are long running processes, they can organize data in the background

10) there are two classes of policies: global e.g. how many repos each  user can have
       vs per repo policy e.g. minimal ownership needed to manage issues.
       the global policy if managed in app conf folder. The per repo
       policies are managed with a db model model_repo_policy
11) models are always fully initialised!

to remotely debug:

activator -jvm-debug 9999 run
(see here: http://stackoverflow.com/questions/24218341/how-to-run-play-framework-2-x-in-debug-mode-in-intellij-idea
answer at the bottom)

TODO: cloudflare?
TODO: google analytics?
TODO: cache everything: index / faq / help / explore (every few hrs or minutes) / etc
// look here: https://www.playframework.com/documentation/2.0/JavaCache

