Current development practices:

1) only store_local_db touches db models
2) stores can only READ from other stores
3) only controller_main touches views
4) business logic goes in the controllers
5) shared controller logic and specialized logic goes in handlers
6) 3rd party tools go in vendors
7) models are basically data-holders maybe plus some simple logic
8) github models are `smallest common denomoinator`, in the github api sense. ie
     all models can be built from the minial info in github api
9) Sync classes are long running processes, they can organize data in the background

10) there are two classes of policies: global e.g. how many repos each  user can have
       vs per repo policy e.g. minimal ownership needed to manage issues.
       the global policy if managed in app conf folder. The per repo
       policies are managed with a db model model_repo_policy
11) models are always fully initialised! at least that is, one level deep. This should be done recursively, there's a todo about it
12) store_local_db only saves the 1st level in each model!

to remotely debug:

activator -jvm-debug 9999 run
(see here: http://stackoverflow.com/questions/24218341/how-to-run-play-framework-2-x-in-debug-mode-in-intellij-idea
answer at the bottom)

TODO: cloudflare?
TODO: google analytics?
TODO: cache everything: index / faq / help / explore (every few hrs or minutes) / etc
// look here: https://www.playframework.com/documentation/2.0/JavaCache

Currenly working on:

1) ebean L2 Caching
2) "blogpost"
3) finding a name

Future:

1) Web GUI
2) feedback on teams
3) blogging platform
4) better webpage
5) upload images and other stuff
6) store
7) ownership transactins w/o merging
8) auto generated license or ownership doc
9) slack integration
10) feature suggesting and voting
11) a "were working on" page

nice blog design:

http://www.monkeysnatchbanana.com/2015/12/19/inside-the-pony-tcp-stack/

ebean L2 caching:

ebean-orm.github.io/docs/features/l2caching

indie delete query:

stackoverflow.com/questions/21813138/how-do-i-perform-a-sql-batch-delete-with-the-playframework-2-ebean

